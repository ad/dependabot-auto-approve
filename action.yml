name: 'Dependabot Auto Manage'
description: 'Automatically approve and merge Dependabot PRs for production dependencies'
author: 'ad'

inputs:
  github-token:
    description: 'GitHub token for API calls (use PAT for auto-approval)'
    required: false
    default: ${{ github.token }}
  dependency-type:
    description: 'Type of dependencies to auto-merge (direct:production, direct:development, all)'
    required: false
    default: 'direct:production'
  merge-method:
    description: 'Merge method to use (merge, squash, rebase)'
    required: false
    default: 'squash'
  auto-merge:
    description: 'Enable auto-merge (requires branch protection rules)'
    required: false
    default: 'false'
  add-label:
    description: 'Label to add to approved PRs'
    required: false
    default: 'dependabot-approved'
  pr-number:
    description: 'PR number (for manual dispatch workflows)'
    required: false
  pr-url:
    description: 'PR URL (for manual dispatch workflows)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Check if PR is from Dependabot
      id: check_dependabot
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        # Handle manual dispatch with provided PR details
        if [ -n "${{ inputs.pr-number }}" ] && [ -n "${{ inputs.pr-url }}" ]; then
          echo "is_dependabot=true" >> $GITHUB_OUTPUT
          echo "pr_number=${{ inputs.pr-number }}" >> $GITHUB_OUTPUT
          echo "pr_url=${{ inputs.pr-url }}" >> $GITHUB_OUTPUT
          echo "‚úÖ Manual dispatch: processing PR #${{ inputs.pr-number }}"
        elif [ "${{ github.event_name }}" = "pull_request" ]; then
          # For pull_request events, check the user from event
          if [[ "${{ github.event.pull_request.user.login }}" = "dependabot[bot]" || "${{ github.event.pull_request.user.login }}" = "app/dependabot" ]]; then
            echo "is_dependabot=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
            echo "‚úÖ Automatic: processing Dependabot PR #${{ github.event.pull_request.number }}"
          else
            echo "is_dependabot=false" >> $GITHUB_OUTPUT
            echo "‚ùå PR is not from Dependabot (author: ${{ github.event.pull_request.user.login }})"
            exit 0
          fi
        else
          echo "‚ùå This action requires either pull_request event or manual dispatch with pr-number and pr-url inputs"
          exit 1
        fi

    - name: Get dependency metadata
      id: metadata
      if: steps.check_dependabot.outputs.is_dependabot == 'true' && github.event_name == 'pull_request'
      uses: dependabot/fetch-metadata@v2
      
    - name: Set dependency type for manual dispatch
      id: manual_metadata
      if: steps.check_dependabot.outputs.is_dependabot == 'true' && github.event_name != 'pull_request'
      shell: bash
      run: |
        # For manual dispatch, use the target dependency type directly
        echo "dependency-type=${{ inputs.dependency-type }}" >> $GITHUB_OUTPUT
        echo "üìã Manual dispatch: processing as ${{ inputs.dependency-type }} dependency"

    - name: Check dependency type
      id: check_dependency
      if: steps.check_dependabot.outputs.is_dependabot == 'true'
      shell: bash
      run: |
        # Get dependency type from appropriate source
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          DEPENDENCY_TYPE="${{ steps.metadata.outputs.dependency-type }}"
        else
          DEPENDENCY_TYPE="${{ steps.manual_metadata.outputs.dependency-type }}"
        fi
        
        TARGET_TYPE="${{ inputs.dependency-type }}"
        
        echo "Dependency type: $DEPENDENCY_TYPE"
        echo "Target type: $TARGET_TYPE"
        
        if [[ "$TARGET_TYPE" = "all" || "$DEPENDENCY_TYPE" = "$TARGET_TYPE" ]]; then
          echo "should_process=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Dependency type matches target: $DEPENDENCY_TYPE"
        else
          echo "should_process=false" >> $GITHUB_OUTPUT
          echo "‚è≠Ô∏è Skipping: dependency type $DEPENDENCY_TYPE doesn't match target $TARGET_TYPE"
        fi

    - name: Create label if it doesn't exist
      if: steps.check_dependency.outputs.should_process == 'true' && inputs.add-label != ''
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        LABEL_NAME="${{ inputs.add-label }}"
        set -euo pipefail
        
        # Check if label exists
        EXISTING_LABEL=$(gh label list --repo "${{ github.repository }}" --limit 1000 --json name --jq ".[] | select(.name==\"$LABEL_NAME\") | .name" || echo "")
        
        if [ -z "$EXISTING_LABEL" ]; then
          echo "Creating label: $LABEL_NAME"
          gh label create "$LABEL_NAME" --repo "${{ github.repository }}" --color "0E8A16" --description "Auto-approved Dependabot PRs"
        else
          echo "Label already exists: $LABEL_NAME"
        fi

    - name: Add label to PR
      if: steps.check_dependency.outputs.should_process == 'true' && inputs.add-label != ''
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "Adding label '${{ inputs.add-label }}' to PR #${{ steps.check_dependabot.outputs.pr_number }}"
        gh pr edit "${{ steps.check_dependabot.outputs.pr_url }}" --add-label "${{ inputs.add-label }}"

    - name: Approve PR
      if: steps.check_dependency.outputs.should_process == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "Approving PR #${{ steps.check_dependabot.outputs.pr_number }}"
        
        # Check if we can approve (requires PAT or specific permissions)
        if gh auth status --hostname github.com 2>/dev/null | grep -q "Token:"; then
          if gh pr review --repo "${{ github.repository }}" --approve "${{ steps.check_dependabot.outputs.pr_number }}" 2>/dev/null; then
            echo "‚úÖ PR approved successfully"
          else
            echo "‚ö†Ô∏è  Could not approve PR. This might be because:"
            echo "   1. GITHUB_TOKEN doesn't have approval permissions"
            echo "   2. You need to use a Personal Access Token (PAT)"
            echo "   3. The repository requires review from code owners"
            echo ""
            echo "üí° To enable auto-approval, use a PAT with 'repo' scope:"
            echo "   github-token: \${{ secrets.PAT_TOKEN }}"
            echo ""
            echo "üìù Continuing with merge attempt..."
          fi
        else
          echo "‚ùå GitHub token is not properly configured"
          exit 1
        fi

    - name: Merge PR
      if: steps.check_dependency.outputs.should_process == 'true'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        MERGE_FLAGS="--${{ inputs.merge-method }}"
        
        if [ "${{ inputs.auto-merge }}" = "true" ]; then
          MERGE_FLAGS="$MERGE_FLAGS --auto"
          echo "Enabling auto-merge for PR #${{ steps.check_dependabot.outputs.pr_number }}"
        else
          echo "Merging PR #${{ steps.check_dependabot.outputs.pr_number }}"
        fi
        
        # Attempt to merge
        if gh pr merge --repo "${{ github.repository }}" $MERGE_FLAGS "${{ steps.check_dependabot.outputs.pr_number }}" 2>/dev/null; then
          echo "‚úÖ PR merged successfully"
        else
          echo "‚ö†Ô∏è  Could not merge PR. This might be because:"
          echo "   1. PR requires approval first"
          echo "   2. Branch protection rules are enforced"
          echo "   3. Merge conflicts exist"
          echo "   4. Required status checks are pending/failing"
          echo ""
          echo "üí° Check the PR status and requirements at:"
          echo "   ${{ steps.check_dependabot.outputs.pr_url }}"
        fi

branding:
  icon: 'check-circle'
  color: 'green'
